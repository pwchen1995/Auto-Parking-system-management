{"ast":null,"code":"import _classCallCheck from\"/Users/kevinchen/Desktop/WSU_Spring2021/Element of network sicence/project/ia5-pwchen1995/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/kevinchen/Desktop/WSU_Spring2021/Element of network sicence/project/ia5-pwchen1995/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/kevinchen/Desktop/WSU_Spring2021/Element of network sicence/project/ia5-pwchen1995/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/kevinchen/Desktop/WSU_Spring2021/Element of network sicence/project/ia5-pwchen1995/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/kevinchen/Desktop/WSU_Spring2021/Element of network sicence/project/ia5-pwchen1995/node_modules/@babel/runtime/helpers/esm/inherits\";//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\nimport React from'react';import AppMode from'./../AppMode.js';import RoundsTable from'./RoundsTable.js';import RoundForm from'./RoundForm.js';import FloatingButton from'./FloatingButton.js';var Rounds=/*#__PURE__*/function(_React$Component){_inherits(Rounds,_React$Component);//Initialize a Rounds object based on local storage\nfunction Rounds(props){var _this;_classCallCheck(this,Rounds);_this=_possibleConstructorReturn(this,_getPrototypeOf(Rounds).call(this,props));_this.addRound=function(newData){var data=JSON.parse(localStorage.getItem(_this.props.userId));data.rounds[++data.roundCount]=newData;localStorage.setItem(_this.props.userId,JSON.stringify(data));_this.setState({rounds:data.rounds,roundCount:data.roundCount});_this.props.changeMode(AppMode.ROUNDS);};_this.editRound=function(newData){var data=JSON.parse(localStorage.getItem(_this.props.userId));data.rounds[_this.state.editId]=newData;localStorage.setItem(_this.props.userId,JSON.stringify(data));_this.setState({rounds:data.rounds,editId:\"\"});_this.props.changeMode(AppMode.ROUNDS);};_this.deleteRound=function(){var data=JSON.parse(localStorage.getItem(_this.props.userId));delete data.rounds[_this.state.deleteId];localStorage.setItem(_this.props.userId,JSON.stringify(data));_this.setState({rounds:data.rounds,deleteId:\"\"});};_this.setDeleteId=function(val){_this.setState({deleteId:val});};_this.setEditId=function(val){_this.setState({editId:val});};var _data=JSON.parse(localStorage.getItem(_this.props.userId));if(_data==null){//no data yet for this user -- create empty record\n_data={rounds:{},roundCount:0};localStorage.setItem(_this.props.userId,JSON.stringify(_data));}_this.state={rounds:_data.rounds,roundCount:_data.roundCount,deleteId:\"\",editId:\"\",showConfirmDelete:false,menuOpened:_this.props.menuOpened};return _this;}//addRound -- Given an object newData containing a new round, add the round\n//to the current user's list of rounds, incremeting roundCount to ensure\n//the round id is unique. Then commit to local storage and toggle\n//the mode back to AppMode.ROUNDS since the user is done adding a round.\n_createClass(Rounds,[{key:\"render\",//render -- Conditionally render the Rounds mode page as either the rounds\n//table, the rounds form set to obtain a new round, or the rounds form set\n//to edit an existing round.\nvalue:function render(){var _this2=this;// alert(this.state.menuOpened)\nswitch(this.props.mode){case AppMode.ROUNDS:return React.createElement(React.Fragment,null,React.createElement(RoundsTable,{rounds:this.state.rounds,setEditId:this.setEditId,setDeleteId:this.setDeleteId,deleteRound:this.deleteRound,changeMode:this.props.changeMode,menuOpen:this.props.menuOpen}),React.createElement(FloatingButton,{handleClick:function handleClick(){return _this2.props.changeMode(AppMode.ROUNDS_LOGROUND);},menuOpen:this.props.menuOpen,icon:\"fa fa-plus\"}));case AppMode.ROUNDS_LOGROUND:return React.createElement(RoundForm,{mode:this.props.mode,startData:\"\",saveRound:this.addRound});case AppMode.ROUNDS_EDITROUND:return React.createElement(RoundForm,{mode:this.props.mode,startData:this.state.rounds[this.state.editId],saveRound:this.editRound});}}}]);return Rounds;}(React.Component);export default Rounds;","map":{"version":3,"sources":["/Users/kevinchen/Desktop/WSU_Spring2021/Element of network sicence/project/ia5-pwchen1995/src/components/Rounds.js"],"names":["React","AppMode","RoundsTable","RoundForm","FloatingButton","Rounds","props","addRound","newData","data","JSON","parse","localStorage","getItem","userId","rounds","roundCount","setItem","stringify","setState","changeMode","ROUNDS","editRound","state","editId","deleteRound","deleteId","setDeleteId","val","setEditId","showConfirmDelete","menuOpened","mode","menuOpen","ROUNDS_LOGROUND","ROUNDS_EDITROUND","Component"],"mappings":"02BAAA;AACA;AACA;AAEA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,iBAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,kBAAxB,CACA,MAAOC,CAAAA,SAAP,KAAsB,gBAAtB,CACA,MAAOC,CAAAA,cAAP,KAA2B,qBAA3B,C,GAEMC,CAAAA,M,4EAEF;AACA,gBAAYC,KAAZ,CAAmB,wCACX,wEAAMA,KAAN,GADW,MAoBnBC,QApBmB,CAoBR,SAACC,OAAD,CAAa,CACpB,GAAIC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAAKP,KAAL,CAAWQ,MAAhC,CAAX,CAAX,CACAL,IAAI,CAACM,MAAL,CAAY,EAAEN,IAAI,CAACO,UAAnB,EAAiCR,OAAjC,CACAI,YAAY,CAACK,OAAb,CAAqB,MAAKX,KAAL,CAAWQ,MAAhC,CAAwCJ,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAxC,EACA,MAAKU,QAAL,CAAc,CAACJ,MAAM,CAAEN,IAAI,CAACM,MAAd,CAAsBC,UAAU,CAAEP,IAAI,CAACO,UAAvC,CAAd,EACA,MAAKV,KAAL,CAAWc,UAAX,CAAsBnB,OAAO,CAACoB,MAA9B,EACH,CA1BkB,OAiCnBC,SAjCmB,CAiCP,SAACd,OAAD,CAAa,CACrB,GAAIC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAAKP,KAAL,CAAWQ,MAAhC,CAAX,CAAX,CACAL,IAAI,CAACM,MAAL,CAAY,MAAKQ,KAAL,CAAWC,MAAvB,EAAiChB,OAAjC,CACAI,YAAY,CAACK,OAAb,CAAqB,MAAKX,KAAL,CAAWQ,MAAhC,CAAwCJ,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAxC,EACA,MAAKU,QAAL,CAAc,CAACJ,MAAM,CAAEN,IAAI,CAACM,MAAd,CAAsBS,MAAM,CAAE,EAA9B,CAAd,EACA,MAAKlB,KAAL,CAAWc,UAAX,CAAsBnB,OAAO,CAACoB,MAA9B,EACH,CAvCkB,OA2CnBI,WA3CmB,CA2CL,UAAM,CAChB,GAAIhB,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAAKP,KAAL,CAAWQ,MAAhC,CAAX,CAAX,CACA,MAAOL,CAAAA,IAAI,CAACM,MAAL,CAAY,MAAKQ,KAAL,CAAWG,QAAvB,CAAP,CACAd,YAAY,CAACK,OAAb,CAAqB,MAAKX,KAAL,CAAWQ,MAAhC,CAAuCJ,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAvC,EACA,MAAKU,QAAL,CAAc,CAACJ,MAAM,CAAEN,IAAI,CAACM,MAAd,CAAsBW,QAAQ,CAAE,EAAhC,CAAd,EACH,CAhDkB,OAoDnBC,WApDmB,CAoDL,SAACC,GAAD,CAAS,CACnB,MAAKT,QAAL,CAAc,CAACO,QAAQ,CAAEE,GAAX,CAAd,EACH,CAtDkB,OA0DnBC,SA1DmB,CA0DP,SAACD,GAAD,CAAS,CACjB,MAAKT,QAAL,CAAc,CAACK,MAAM,CAAEI,GAAT,CAAd,EACH,CA5DkB,CAEX,GAAInB,CAAAA,KAAI,CAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAAKP,KAAL,CAAWQ,MAAhC,CAAX,CAAX,CACA,GAAIL,KAAI,EAAI,IAAZ,CAAkB,CAAE;AAChBA,KAAI,CAAG,CAACM,MAAM,CAAE,EAAT,CACCC,UAAU,CAAE,CADb,CAAP,CAEAJ,YAAY,CAACK,OAAb,CAAqB,MAAKX,KAAL,CAAWQ,MAAhC,CAAuCJ,IAAI,CAACQ,SAAL,CAAeT,KAAf,CAAvC,EACH,CACD,MAAKc,KAAL,CAAa,CAACR,MAAM,CAAEN,KAAI,CAACM,MAAd,CACCC,UAAU,CAAEP,KAAI,CAACO,UADlB,CAECU,QAAQ,CAAE,EAFX,CAGCF,MAAM,CAAE,EAHT,CAICM,iBAAiB,CAAE,KAJpB,CAKCC,UAAU,CAAE,MAAKzB,KAAL,CAAWyB,UALxB,CAAb,CARW,aAcd,CAEL;AACA;AACA;AACA;mCA2CA;AACA;AACA;uBACS,iBACL;AACA,OAAO,KAAKzB,KAAL,CAAW0B,IAAlB,EACI,IAAK/B,CAAAA,OAAO,CAACoB,MAAb,CACI,MACI,yCACA,oBAAC,WAAD,EACA,MAAM,CAAE,KAAKE,KAAL,CAAWR,MADnB,CAEA,SAAS,CAAE,KAAKc,SAFhB,CAGA,WAAW,CAAE,KAAKF,WAHlB,CAIA,WAAW,CAAE,KAAKF,WAJlB,CAKA,UAAU,CAAE,KAAKnB,KAAL,CAAWc,UALvB,CAMA,QAAQ,CAAE,KAAKd,KAAL,CAAW2B,QANrB,EADA,CAQA,oBAAC,cAAD,EACI,WAAW,CAAE,6BACb,CAAA,MAAI,CAAC3B,KAAL,CAAWc,UAAX,CAAsBnB,OAAO,CAACiC,eAA9B,CADa,EADjB,CAGI,QAAQ,CAAE,KAAK5B,KAAL,CAAW2B,QAHzB,CAII,IAAI,CAAE,YAJV,EARA,CADJ,CAgBJ,IAAKhC,CAAAA,OAAO,CAACiC,eAAb,CACI,MACI,qBAAC,SAAD,EACI,IAAI,CAAE,KAAK5B,KAAL,CAAW0B,IADrB,CAEI,SAAS,CAAE,EAFf,CAGI,SAAS,CAAE,KAAKzB,QAHpB,EADJ,CAMJ,IAAKN,CAAAA,OAAO,CAACkC,gBAAb,CACI,MACI,qBAAC,SAAD,EACI,IAAI,CAAE,KAAK7B,KAAL,CAAW0B,IADrB,CAEI,SAAS,CAAE,KAAKT,KAAL,CAAWR,MAAX,CAAkB,KAAKQ,KAAL,CAAWC,MAA7B,CAFf,CAGI,SAAS,CAAE,KAAKF,SAHpB,EADJ,CA1BR,CAiCH,C,oBAvGgBtB,KAAK,CAACoC,S,EA2G3B,cAAe/B,CAAAA,MAAf","sourcesContent":["//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\n\nimport React from 'react';\nimport AppMode from './../AppMode.js';\nimport RoundsTable from './RoundsTable.js';\nimport RoundForm from './RoundForm.js';\nimport FloatingButton from './FloatingButton.js';\n\nclass Rounds extends React.Component {\n\n    //Initialize a Rounds object based on local storage\n    constructor(props) {\n            super(props);\n            let data = JSON.parse(localStorage.getItem(this.props.userId)); \n            if (data == null) { //no data yet for this user -- create empty record\n                data = {rounds: {},\n                        roundCount: 0};  \n                localStorage.setItem(this.props.userId,JSON.stringify(data));\n            }\n            this.state = {rounds: data.rounds,\n                          roundCount: data.roundCount,\n                          deleteId: \"\",\n                          editId: \"\",\n                          showConfirmDelete: false,\n                          menuOpened: this.props.menuOpened};           \n        }\n\n    //addRound -- Given an object newData containing a new round, add the round\n    //to the current user's list of rounds, incremeting roundCount to ensure\n    //the round id is unique. Then commit to local storage and toggle\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\n    addRound = (newData) => {\n        let data = JSON.parse(localStorage.getItem(this.props.userId));\n        data.rounds[++data.roundCount] = newData;\n        localStorage.setItem(this.props.userId, JSON.stringify(data));\n        this.setState({rounds: data.rounds, roundCount: data.roundCount});\n        this.props.changeMode(AppMode.ROUNDS);\n    }\n\n    //editRound -- Given an object newData containing updated data on an\n    //existing round, update the current user's round uniquely identified by\n    //this.state.editId, commit to local storage, reset editId to empty and\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\n    //round. \n    editRound = (newData) => {\n        let data = JSON.parse(localStorage.getItem(this.props.userId)); \n        data.rounds[this.state.editId] = newData;\n        localStorage.setItem(this.props.userId, JSON.stringify(data));\n        this.setState({rounds: data.rounds, editId: \"\"});\n        this.props.changeMode(AppMode.ROUNDS);\n    }\n\n    //deleteRound -- Delete the current user's round uniquely identified by\n    //this.state.deleteId, commit to local storage, and reset deleteId to empty.\n    deleteRound = () => {\n        let data = JSON.parse(localStorage.getItem(this.props.userId));\n        delete data.rounds[this.state.deleteId];\n        localStorage.setItem(this.props.userId,JSON.stringify(data));\n        this.setState({rounds: data.rounds, deleteId: \"\"});\n    }  \n\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\n    //the user is considering deleting.\n    setDeleteId = (val) => {\n        this.setState({deleteId: val});\n    }\n\n    //setEditId -- Capture in this.state.editId the unique id of the item\n    //the user is considering editing.\n    setEditId = (val) => {\n        this.setState({editId: val});\n    }\n    \n    //render -- Conditionally render the Rounds mode page as either the rounds\n    //table, the rounds form set to obtain a new round, or the rounds form set\n    //to edit an existing round.\n    render() {\n        // alert(this.state.menuOpened)\n        switch(this.props.mode) {\n            case AppMode.ROUNDS:\n                return (\n                    <>\n                    <RoundsTable \n                    rounds={this.state.rounds}\n                    setEditId={this.setEditId}\n                    setDeleteId={this.setDeleteId}\n                    deleteRound={this.deleteRound}\n                    changeMode={this.props.changeMode}\n                    menuOpen={this.props.menuOpen} /> \n                    <FloatingButton\n                        handleClick={() => \n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\n                        menuOpen={this.props.menuOpen}\n                        icon={\"fa fa-plus\"} />\n                    </>\n                );\n            case AppMode.ROUNDS_LOGROUND:\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={\"\"} \n                        saveRound={this.addRound} />\n                );\n            case AppMode.ROUNDS_EDITROUND:\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={this.state.rounds[this.state.editId]} \n                        saveRound={this.editRound} />\n                );\n        }\n    }\n\n}   \n\nexport default Rounds;\n"]},"metadata":{},"sourceType":"module"}