{"ast":null,"code":"var _jsxFileName = \"/Users/kevinchen/Desktop/WSU_Spring2021/Software Quality/project/ia5-pwchen1995/src/components/Reservations.js\";\n//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\nimport React from 'react';\nimport AppMode from '../AppMode.js';\nimport RounReservationdsTable from './ReservationsTable.js';\nimport ReservationForm from './ReservationForm.js';\nimport FloatingButton from './FloatingButton.js';\n\nclass Reservations extends React.Component {\n  //Initialize a Rounds object based on local storage\n  constructor(props) {\n    super(props);\n\n    this.addRound = newData => {\n      let data = JSON.parse(localStorage.getItem(this.props.userId));\n      data.rounds[++data.roundCount] = newData;\n      localStorage.setItem(this.props.userId, JSON.stringify(data));\n      this.setState({\n        rounds: data.rounds,\n        roundCount: data.roundCount\n      });\n      this.props.changeMode(AppMode.ROUNDS);\n    };\n\n    this.editRound = newData => {\n      let data = JSON.parse(localStorage.getItem(this.props.userId));\n      data.rounds[this.state.editId] = newData;\n      localStorage.setItem(this.props.userId, JSON.stringify(data));\n      this.setState({\n        rounds: data.rounds,\n        editId: \"\"\n      });\n      this.props.changeMode(AppMode.ROUNDS);\n    };\n\n    this.deleteRound = () => {\n      let data = JSON.parse(localStorage.getItem(this.props.userId));\n      delete data.rounds[this.state.deleteId];\n      localStorage.setItem(this.props.userId, JSON.stringify(data));\n      this.setState({\n        rounds: data.rounds,\n        deleteId: \"\"\n      });\n    };\n\n    this.setDeleteId = val => {\n      this.setState({\n        deleteId: val\n      });\n    };\n\n    this.setEditId = val => {\n      this.setState({\n        editId: val\n      });\n    };\n\n    let _data = JSON.parse(localStorage.getItem(this.props.userId));\n\n    if (_data == null) {\n      //no data yet for this user -- create empty record\n      _data = {\n        rounds: {},\n        roundCount: 0\n      };\n      localStorage.setItem(this.props.userId, JSON.stringify(_data));\n    }\n\n    this.state = {\n      rounds: _data.rounds,\n      roundCount: _data.roundCount,\n      deleteId: \"\",\n      editId: \"\",\n      showConfirmDelete: false,\n      menuOpened: this.props.menuOpened\n    };\n  } //addRound -- Given an object newData containing a new round, add the round\n  //to the current user's list of rounds, incremeting roundCount to ensure\n  //the round id is unique. Then commit to local storage and toggle\n  //the mode back to AppMode.ROUNDS since the user is done adding a round.\n\n\n  //render -- Conditionally render the Rounds mode page as either the rounds\n  //table, the rounds form set to obtain a new round, or the rounds form set\n  //to edit an existing round.\n  render() {\n    // alert(this.state.menuOpened)\n    switch (this.props.mode) {\n      case AppMode.RESERVATIONS:\n        return React.createElement(React.Fragment, null, React.createElement(RoundsTable, {\n          rounds: this.state.rounds,\n          setEditId: this.setEditId,\n          setDeleteId: this.setDeleteId,\n          deleteRound: this.deleteRound,\n          changeMode: this.props.changeMode,\n          menuOpen: this.props.menuOpen,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }), React.createElement(FloatingButton, {\n          handleClick: () => this.props.changeMode(AppMode.RESERVATIONS_LOGRESERVATION),\n          menuOpen: this.props.menuOpen,\n          icon: \"fa fa-plus\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }));\n\n      case AppMode.RESERVATIONS_LOGRESERVATION:\n        return React.createElement(ReservationForm, {\n          mode: this.props.mode,\n          startData: \"\",\n          saveRound: this.addRound,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        });\n\n      case AppMode.RESERVATIONS_EDITRESERVATION:\n        return React.createElement(ReservationForm, {\n          mode: this.props.mode,\n          startData: this.state.rounds[this.state.editId],\n          saveRound: this.editRound,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        });\n    }\n  }\n\n}\n\nexport default Reservations;","map":{"version":3,"sources":["/Users/kevinchen/Desktop/WSU_Spring2021/Software Quality/project/ia5-pwchen1995/src/components/Reservations.js"],"names":["React","AppMode","RounReservationdsTable","ReservationForm","FloatingButton","Reservations","Component","constructor","props","addRound","newData","data","JSON","parse","localStorage","getItem","userId","rounds","roundCount","setItem","stringify","setState","changeMode","ROUNDS","editRound","state","editId","deleteRound","deleteId","setDeleteId","val","setEditId","showConfirmDelete","menuOpened","render","mode","RESERVATIONS","menuOpen","RESERVATIONS_LOGRESERVATION","RESERVATIONS_EDITRESERVATION"],"mappings":"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","sourcesContent":["//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\n\nimport React from 'react';\nimport AppMode from '../AppMode.js';\nimport RounReservationdsTable from './ReservationsTable.js';\nimport ReservationForm from './ReservationForm.js';\nimport FloatingButton from './FloatingButton.js';\n\nclass Reservations extends React.Component {\n\n    //Initialize a Rounds object based on local storage\n    constructor(props) {\n            super(props);\n            let data = JSON.parse(localStorage.getItem(this.props.userId)); \n            if (data == null) { //no data yet for this user -- create empty record\n                data = {rounds: {},\n                        roundCount: 0};  \n                localStorage.setItem(this.props.userId,JSON.stringify(data));\n            }\n            this.state = {rounds: data.rounds,\n                          roundCount: data.roundCount,\n                          deleteId: \"\",\n                          editId: \"\",\n                          showConfirmDelete: false,\n                          menuOpened: this.props.menuOpened};           \n        }\n\n    //addRound -- Given an object newData containing a new round, add the round\n    //to the current user's list of rounds, incremeting roundCount to ensure\n    //the round id is unique. Then commit to local storage and toggle\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\n    addRound = (newData) => {\n        let data = JSON.parse(localStorage.getItem(this.props.userId));\n        data.rounds[++data.roundCount] = newData;\n        localStorage.setItem(this.props.userId, JSON.stringify(data));\n        this.setState({rounds: data.rounds, roundCount: data.roundCount});\n        this.props.changeMode(AppMode.ROUNDS);\n    }\n\n    //editRound -- Given an object newData containing updated data on an\n    //existing round, update the current user's round uniquely identified by\n    //this.state.editId, commit to local storage, reset editId to empty and\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\n    //round. \n    editRound = (newData) => {\n        let data = JSON.parse(localStorage.getItem(this.props.userId)); \n        data.rounds[this.state.editId] = newData;\n        localStorage.setItem(this.props.userId, JSON.stringify(data));\n        this.setState({rounds: data.rounds, editId: \"\"});\n        this.props.changeMode(AppMode.ROUNDS);\n    }\n\n    //deleteRound -- Delete the current user's round uniquely identified by\n    //this.state.deleteId, commit to local storage, and reset deleteId to empty.\n    deleteRound = () => {\n        let data = JSON.parse(localStorage.getItem(this.props.userId));\n        delete data.rounds[this.state.deleteId];\n        localStorage.setItem(this.props.userId,JSON.stringify(data));\n        this.setState({rounds: data.rounds, deleteId: \"\"});\n    }  \n\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\n    //the user is considering deleting.\n    setDeleteId = (val) => {\n        this.setState({deleteId: val});\n    }\n\n    //setEditId -- Capture in this.state.editId the unique id of the item\n    //the user is considering editing.\n    setEditId = (val) => {\n        this.setState({editId: val});\n    }\n    \n    //render -- Conditionally render the Rounds mode page as either the rounds\n    //table, the rounds form set to obtain a new round, or the rounds form set\n    //to edit an existing round.\n    render() {\n        // alert(this.state.menuOpened)\n        switch(this.props.mode) {\n            case AppMode.RESERVATIONS:\n                return (\n                    <>\n                    <RoundsTable \n                    rounds={this.state.rounds}\n                    setEditId={this.setEditId}\n                    setDeleteId={this.setDeleteId}\n                    deleteRound={this.deleteRound}\n                    changeMode={this.props.changeMode}\n                    menuOpen={this.props.menuOpen} /> \n                    <FloatingButton\n                        handleClick={() => \n                        this.props.changeMode(AppMode.RESERVATIONS_LOGRESERVATION)}\n                        menuOpen={this.props.menuOpen}\n                        icon={\"fa fa-plus\"} />\n                    </>\n                );\n            case AppMode.RESERVATIONS_LOGRESERVATION:\n                return (\n                    <ReservationForm\n                        mode={this.props.mode}\n                        startData={\"\"} \n                        saveRound={this.addRound} />\n                );\n            case AppMode.RESERVATIONS_EDITRESERVATION:\n                return (\n                    <ReservationForm\n                        mode={this.props.mode}\n                        startData={this.state.rounds[this.state.editId]} \n                        saveRound={this.editRound} />\n                );\n        }\n    }\n\n}   \n\nexport default Reservations;\n"]},"metadata":{},"sourceType":"module"}