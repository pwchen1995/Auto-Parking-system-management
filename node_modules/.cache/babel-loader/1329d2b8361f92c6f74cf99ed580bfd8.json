{"ast":null,"code":"var _jsxFileName = \"/Users/kevinchen/Desktop/WSU_Fall2020/Web/git-IA/IA5/ia5-pwchen1995/src/components/RoundForm.js\";\nimport React from 'react';\nimport AppMode from './../AppMode.js';\n\nclass RoundForm extends React.Component {\n  constructor(props) {\n    super(props); //Create date object for today, taking time zone into consideration\n\n    this.handleChange = event => {\n      const name = event.target.name;\n\n      if (name === \"seconds\") {\n        let newSec = event.target.value.length < 2 ? \"0\" + event.target.value : event.target.value;\n        let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, newSec);\n        this.setState({\n          seconds: newSec,\n          SGS: newSGS\n        });\n      } else if (name === \"strokes\") {\n        let newStrokes = event.target.value;\n        let newSGS = this.computeSGS(newStrokes, this.state.minutes, this.state.seconds);\n        this.setState({\n          strokes: newStrokes,\n          SGS: newSGS\n        });\n      } else if (name === \"minutes\") {\n        let newMin = event.target.value;\n        let newSGS = this.computeSGS(this.state.strokes, newMin, this.state.seconds);\n        this.setState({\n          minutes: newMin,\n          SGS: newSGS\n        });\n      } else {\n        this.setState({\n          [name]: event.target.value\n        });\n      }\n    };\n\n    this.handleSubmit = event => {\n      //start spinner\n      this.setState({\n        faIcon: \"fa fa-spin fa-spinner\",\n        btnLabel: this.props.mode === AppMode.ROUNDS_LOGROUND ? \"Saving...\" : \"Updating...\"\n      }); //Prepare current round data to be saved\n\n      let roundData = this.state;\n      delete roundData.faIcon;\n      delete roundData.btnLabel; //call saveRound on 1 second delay to show spinning icon\n\n      setTimeout(this.props.saveRound, 1000, roundData);\n      event.preventDefault();\n    };\n\n    this.computeSGS = (strokes, min, sec) => {\n      return Number(strokes) + Number(min) + \":\" + sec;\n    };\n\n    let today = new Date(Date.now() - new Date().getTimezoneOffset() * 60000); //store date as ISO string\n\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\n      //If logging a new round, the starting state is a default round with\n      //today's date.\n      this.state = {\n        date: today.toISOString().substr(0, 10),\n        course: \"\",\n        type: \"practice\",\n        holes: \"18\",\n        strokes: 80,\n        minutes: 50,\n        seconds: \"00\",\n        notes: \"\",\n        faIcon: \"fa fa-save\",\n        btnLabel: \"Save Round Data\"\n      };\n    } else {\n      //if editing an existing round, the starting state is the round's\n      //current data\n      this.state = this.props.startData;\n      this.state.faIcon = \"fa fa-edit\";\n      this.state.btnLabel = \"Update Round Data\";\n    }\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"padded-page\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Date:\", React.createElement(\"input\", {\n      name: \"date\",\n      className: \"form-control form-center\",\n      type: \"date\",\n      value: this.state.date,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Course:\", React.createElement(\"input\", {\n      name: \"course\",\n      className: \"form-control form-center\",\n      type: \"text\",\n      value: this.state.course,\n      onChange: this.handleChange,\n      placeholder: \"Course played\",\n      size: \"50\",\n      maxLength: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Type:\", React.createElement(\"select\", {\n      name: \"type\",\n      value: this.state.type,\n      className: \"form-control form-center\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"practice\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Practice\"), React.createElement(\"option\", {\n      value: \"tournament\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Tournament\"))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"# Holes:\", React.createElement(\"select\", {\n      name: \"holes\",\n      value: this.state.holes,\n      className: \"form-control form-center\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"9\"), React.createElement(\"option\", {\n      value: \"18\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"18\"))), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"# Strokes:\", React.createElement(\"input\", {\n      name: \"strokes\",\n      className: \"form-control form-center\",\n      type: \"number\",\n      min: \"9\",\n      max: \"200\",\n      value: this.state.strokes,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Time: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"minutes\",\n      type: \"number\",\n      size: \"3\",\n      min: \"10\",\n      max: \"400\",\n      value: this.state.minutes,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), \":\", React.createElement(\"input\", {\n      name: \"seconds\",\n      type: \"number\",\n      size: \"2\",\n      min: \"0\",\n      max: \"60\",\n      value: this.state.seconds,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Speedgolf Score: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"SGS\",\n      className: \"form-center\",\n      type: \"text\",\n      size: \"6\",\n      disabled: true,\n      value: this.state.SGS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Notes:\", React.createElement(\"textarea\", {\n      name: \"notes\",\n      className: \"form-control\",\n      rows: \"6\",\n      cols: \"75\",\n      placeholder: \"Enter round notes\",\n      value: this.state.notes,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      style: {\n        width: \"70%\",\n        fontSize: \"36px\"\n      },\n      className: \"btn btn-primary btn-color-theme\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: this.state.faIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), \"\\xA0\", this.state.btnLabel)));\n  }\n\n}\n\nexport default RoundForm;","map":{"version":3,"sources":["/Users/kevinchen/Desktop/WSU_Fall2020/Web/git-IA/IA5/ia5-pwchen1995/src/components/RoundForm.js"],"names":["React","AppMode","RoundForm","Component","constructor","props","handleChange","event","name","target","newSec","value","length","newSGS","computeSGS","state","strokes","minutes","setState","seconds","SGS","newStrokes","newMin","handleSubmit","faIcon","btnLabel","mode","ROUNDS_LOGROUND","roundData","setTimeout","saveRound","preventDefault","min","sec","Number","today","Date","now","getTimezoneOffset","date","toISOString","substr","course","type","holes","notes","startData","render","width","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AppMode from './../AppMode.js';\n\nclass RoundForm extends React.Component {\n    constructor(props) {\n        super(props);\n        //Create date object for today, taking time zone into consideration\n        let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\n        //store date as ISO string\n        if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\n            //If logging a new round, the starting state is a default round with\n            //today's date.\n            this.state = {date:  today.toISOString().substr(0,10), \n                        course: \"\",\n                        type: \"practice\",\n                        holes: \"18\",\n                        strokes: 80,\n                        minutes: 50,\n                        seconds: \"00\",\n                        notes: \"\",\n                        faIcon: \"fa fa-save\",\n                        btnLabel: \"Save Round Data\"}\n        } else {\n            //if editing an existing round, the starting state is the round's\n            //current data\n            this.state = this.props.startData;\n            this.state.faIcon = \"fa fa-edit\";\n            this.state.btnLabel = \"Update Round Data\";\n        }\n    }\n  \n  \n    handleChange = (event) => {\n        const name = event.target.name;\n        if (name === \"seconds\") {\n          let newSec = (event.target.value.length < 2 ? \"0\" + \n            event.target.value : event.target.value);\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \n                                       newSec);\n          this.setState({seconds: newSec, SGS: newSGS});\n        } else if (name === \"strokes\") {\n          let newStrokes = event.target.value;\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \n            this.state.seconds);\n          this.setState({strokes: newStrokes, SGS: newSGS});\n        } else if (name === \"minutes\") {\n            let newMin = event.target.value;\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \n              this.state.seconds);\n            this.setState({minutes: newMin, SGS: newSGS});\n        } else {\n          this.setState({[name]: event.target.value});\n        }\n    }\n  \n  \n    //handleSubmit -- When the user clicks on the button to save/update the\n    //round, start the spinner and invoke the parent component's saveRound\n    //method to do the actual work. Note that saveRound is set to the correct\n    //parent method based on whether the user is logging a new round or editing\n    //an existing round.\n    handleSubmit = (event) => {\n        //start spinner\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                                    \"Saving...\" : \"Updating...\")});\n        //Prepare current round data to be saved\n        let roundData = this.state;\n        delete roundData.faIcon;\n        delete roundData.btnLabel;\n        //call saveRound on 1 second delay to show spinning icon\n        setTimeout(this.props.saveRound,1000,roundData); \n        event.preventDefault(); \n        }\n  \n\n    computeSGS = (strokes, min, sec) => {\n      return (Number(strokes) + Number(min)) \n                  + \":\" + sec;\n    }\n  \n    render() {\n      return (\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\n          <center>\n            <label>\n              Date:\n              <input name=\"date\" className=\"form-control form-center\" \n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\n            </label>\n            <p></p>\n            <label>\n              Course:\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\n                value={this.state.course} onChange={this.handleChange}\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\n            </label>\n          <p></p>\n          <label>Type:\n          <select name=\"type\" value={this.state.type} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"practice\">Practice</option>\n            <option value=\"tournament\">Tournament</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Holes:\n          <select name=\"holes\" value={this.state.holes} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"9\">9</option>\n            <option value=\"18\">18</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Strokes:\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \n            min=\"9\" max=\"200\" value={this.state.strokes} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Time: <br></br>\n          <input name=\"minutes\" type=\"number\" size=\"3\"\n            min=\"10\" max=\"400\" value={this.state.minutes}\n            onChange={this.handleChange} />:  \n          <input name=\"seconds\" type=\"number\" size=\"2\"\n            min=\"0\" max=\"60\" value={this.state.seconds} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Speedgolf Score: <br></br>\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \n                disabled={true} value={this.state.SGS} />\n          </label>\n          <p></p>\n          <label>Notes:\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \n                placeholder=\"Enter round notes\" value={this.state.notes} \n                onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <p></p>\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \n            className=\"btn btn-primary btn-color-theme\">\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\n          </button>\n          </center>\n        </form>\n      );\n    }\n}\n\nexport default RoundForm;"]},"metadata":{},"sourceType":"module"}